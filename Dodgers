---
title: "Dodger Dogs"
author: "PJ under the guidance. of Margo Bergman"
date: "10/05/2022"
output: word_document
---
```{r} 
install.packages("knitr")
```

```{r}
library(knitr)
```


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/margo/Dropbox/My PC (JULENE)/Documents/UWTacoma/TBANLT540/Data"))
```

If you need to install these packages, then you would run this section of code:

```{r necessary packages, eval=FALSE, include=FALSE}
install.packages("car")
install.packages("lattice")
install.packages("lmtest")
```

```{r library packages}
library(car)
library(lattice)
library(lmtest)
```

Now we need to load our data into R Studio. 

```{r data}
dodgers <- read.csv("dodgers.csv")
print(str(dodgers))  # check the structure of the data frame
```

```{r define an ordered day-of-week variable}
dodgers$ordered_day_of_week <- with(data=dodgers,
                                    ifelse ((day_of_week == "Monday"),1,
                                            ifelse ((day_of_week == "Tuesday"),2,
                                                    ifelse ((day_of_week == "Wednesday"),3,
                                                            ifelse ((day_of_week == "Thursday"),4,
                                                                    ifelse ((day_of_week == "Friday"),5,
                                                                            ifelse ((day_of_week == "Saturday"),6,7)))))))


dodgers$ordered_day_of_week <- factor(dodgers$ordered_day_of_week, levels=1:7,
                                      labels=c("Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"))


```


Exploratory data analysis with standard graphics:

Boxplot of Attendance, by day of week


```{r attendance by day of week}

with(data=dodgers,plot(ordered_day_of_week, attend/1000,
                       xlab = "Day of Week", ylab = "Attendance (thousands)",
                       col = "violet", las = 1))


```
Table of values of Bobbleheads by day of week:

```{r when do the Dodgers use bobblehead promotions}
with(dodgers, table(bobblehead,ordered_day_of_week)) 
```

Attendance by month:


```{r define an ordered month variable}
dodgers$ordered_month <- with(data=dodgers,
                              ifelse ((month == "APR"),4,
                                      ifelse ((month == "MAY"),5,
                                              ifelse ((month == "JUN"),6,
                                                      ifelse ((month == "JUL"),7,
                                                              ifelse ((month == "AUG"),8,
                                                                      ifelse ((month == "SEP"),9,10)))))))
dodgers$ordered_month <- factor(dodgers$ordered_month, levels=4:10,
                                labels = c("April", "May", "June", "July", "Aug", "Sept", "Oct"))

```


Boxplot of Attendance, by month

```{r exploratory data analysis with standard R graphics: attendance by month}
with(data=dodgers,plot(ordered_month,attend/1000, xlab = "Month",
                       ylab = "Attendance (thousands)", col = "light blue", las = 1))

```


Exploratory data analysis displaying many variables looking at attendance

4-way scatter plot of day/night, the skies, and whether or not fireworks are displayed

```{r Day/Night_Skies_Fireworks}

group.labels <- c("No Fireworks","Fireworks")
group.symbols <- c(21,24)
group.colors <- c("black","black")
group.fill <- c("black","red")
xyplot(attend/1000 ~ temp | skies + day_night,
       data = dodgers, groups = fireworks, pch = group.symbols,
       aspect = 1, cex = 1.5, col = group.colors, fill = group.fill,
       layout = c(2, 2), type = c("p","g"),
       strip=strip.custom(strip.levels=TRUE,strip.names=FALSE, style=1),
       xlab = "Temperature (Degrees Fahrenheit)",
       ylab = "Attendance (thousands)",
       key = list(space = "top",
                  text = list(rev(group.labels),col = rev(group.colors)),
                  points = list(pch = rev(group.symbols), col = rev(group.colors),
                                fill = rev(group.fill))))
```


Attendance by opponent and day/night game

```{r Attendance}
group.labels <- c("Day","Night")
group.symbols <- c(1,20)
group.symbols.size <- c(2,2.75)
bwplot(opponent ~ attend/1000, data = dodgers, groups = day_night,
       xlab = "Attendance (thousands)",
       panel = function(x, y, groups, subscripts, ...)
       {panel.grid(h = (length(levels(dodgers$opponent)) - 1), v = -1)
         panel.stripplot(x, y, groups = groups, subscripts = subscripts,
                         cex = group.symbols.size, pch = group.symbols, col = "darkblue")
       },
       key = list(space = "top",
                  text = list(group.labels,col = "black"),
                  points = list(pch = group.symbols, cex = group.symbols.size,
                                col = "darkblue")))
```

Employ training-and-test regimen for model validation

```{r training-and-test}

set.seed(1234) # set seed for repeatability of training-and-test split
training_test <- c(rep(1,length=trunc((2/3)*nrow(dodgers))),
                   rep(2,length=(nrow(dodgers) - trunc((2/3)*nrow(dodgers)))))
dodgers$training_test <- sample(training_test) # random permutation
dodgers$training_test <- factor(dodgers$training_test,
                                levels=c(1,2), labels=c("TRAIN","TEST"))
dodgers.train <- subset(dodgers, training_test == "TRAIN")
print(str(dodgers.train)) # check training data frame
dodgers.test <- subset(dodgers, training_test == "TEST")
print(str(dodgers.test)) # check test data frame
```

Employ training-and-test regimen for model validation - Part 2

```{r}
#Specify a simple model with bobblehead entered last
my.model <- {attend ~ ordered_month + ordered_day_of_week + bobblehead}
my.model2 <- {attend ~ ordered_day_of_week + bobblehead}
# fit the model to the training set
train.model.fit <- lm(my.model, data = dodgers.train)
train.model2.fit <- lm(my.model2, data = dodgers.train)
# summary of model fit to the training set
print(summary(train.model2.fit))
# training set predictions from the model fit to the training set
dodgers.train$predict_attend <- predict(train.model.fit)
# test set predictions from the model fit to the training set
dodgers.test$predict_attend <- predict(train.model.fit,
                                       newdata = dodgers.test)
# compute the proportion of response variance
# accounted for when predicting out-of-sample
cat("\n","Proportion of Test Set Variance Accounted for: ",
    round((with(dodgers.test,cor(attend,predict_attend)^2)),
          digits=3),"\n",sep="")
# merge the training and test sets for plotting
dodgers.plotting.frame <- rbind(dodgers.train,dodgers.test)

```

Graphing

```{r generate predictive modeling visual for management}
group.labels <- c("No Bobbleheads","Bobbleheads")
group.symbols <- c(21,24)
group.colors <- c("black","black")
group.fill <- c("black","red")
xyplot(predict_attend/1000 ~ attend/1000 | training_test,
       data = dodgers.plotting.frame, groups = bobblehead, cex = 2,
       pch = group.symbols, col = group.colors, fill = group.fill,
       layout = c(2, 1), xlim = c(20,65), ylim = c(20,65),
       aspect=1, type = c("p","g"),
       panel=function(x,y, ...)
       {panel.xyplot(x,y,...)
         panel.segments(25,25,60,60,col="black",cex=2)
       },
       strip=function(...) strip.default(..., style=1),
       xlab = "Actual Attendance (thousands)",
       ylab = "Predicted Attendance (thousands)",
       key = list(space = "top",
                  text = list(rev(group.labels),col = rev(group.colors)),
                  points = list(pch = rev(group.symbols),
                                col = rev(group.colors),
                                fill = rev(group.fill))))

```


Use the full data set to obtain an estimate of the increase in attendance due to bobbleheads, controlling for other factors.

```{r increase in attendance due to bobbleheads}
my.model.fit <- lm(my.model, data = dodgers)   # use all available data
print(summary(my.model.fit))
# tests statistical significance of the bobblehead promotion
# type I anova computes sums of squares for sequential tests
print(anova(my.model.fit))
cat("\n","Estimated Effect of Bobblehead Promotion on Attendance: ",
    round(my.model.fit$coefficients[length(my.model.fit$coefficients)],
          digits = 0),"\n",sep="")
# standard graphics provide diagnostic plots
plot(my.model.fit)
```


Residuals

```{r}

                     
residualPlots(my.model.fit)

#null is heteroskedasticity 
bptest(my.model.fit)



```
